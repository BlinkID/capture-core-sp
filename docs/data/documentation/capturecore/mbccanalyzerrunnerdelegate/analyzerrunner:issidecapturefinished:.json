{"hierarchy":{"paths":[["doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore","doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunnerDelegate"]]},"kind":"symbol","abstract":[{"type":"text","text":"Method used to finish capture of current side when "},{"code":"analyzeImage","type":"codeVoice"},{"text":" didn’t return","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCSideCaptureResult","isActive":true},{"text":" state.","type":"text"}],"metadata":{"navigatorTitle":[{"text":"analyzerRunner:isSideCaptureFinished:","kind":"identifier"}],"symbolKind":"method","role":"symbol","roleHeading":"Instance Method","externalID":"c:objc(pl)MBCCAnalyzerRunnerDelegate(im)analyzerRunner:isSideCaptureFinished:","title":"analyzerRunner:isSideCaptureFinished:","modules":[{"name":"CaptureCore"}],"fragments":[{"kind":"text","text":"- "},{"text":"analyzerRunner:isSideCaptureFinished:","kind":"identifier"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"- (","kind":"text"},{"kind":"typeIdentifier","text":"void","preciseIdentifier":"c:v"},{"text":") ","kind":"text"},{"kind":"identifier","text":"analyzerRunner:"},{"text":"(","kind":"text"},{"preciseIdentifier":"c:objc(cs)MBCCAnalyzerRunner","text":"MBCCAnalyzerRunner","kind":"typeIdentifier","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunner"},{"text":" *) ","kind":"text"},{"text":"analyzerRunner","kind":"internalParam"},{"kind":"text","text":" "},{"text":"isSideCaptureFinished:","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"BOOL","preciseIdentifier":"c:@T@BOOL"},{"text":") ","kind":"text"},{"kind":"internalParam","text":"isSideCaptureFinished"},{"text":";","kind":"text"}],"platforms":["iOS"],"languages":["occ"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Method tries to fill "},{"isActive":true,"identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCSideCaptureResult","type":"reference"},{"type":"text","text":" with current best frame, if there isn’t one method returns "},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"text":"and result is not changed, otherwise ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" is returned and current best frame is filled in current SideCaptureResult.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Method can be used only once per side capture session."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"analyzerRunner: Component responsible for image analysis and best frame capture.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"isSideCaptureFinished: Current status of the analysis and the capture process and further required actions."}],"type":"paragraph"}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunnerDelegate\/analyzerRunner:isSideCaptureFinished:","interfaceLanguage":"occ"},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/capturecore\/mbccanalyzerrunnerdelegate\/analyzerrunner:issidecapturefinished:"]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.microblink.CaptureCore/documentation/CaptureCore/MBCCAnalyzerRunnerDelegate":{"type":"topic","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunnerDelegate","kind":"symbol","abstract":[],"url":"\/documentation\/capturecore\/mbccanalyzerrunnerdelegate","title":"MBCCAnalyzerRunnerDelegate","fragments":[{"text":"MBCCAnalyzerRunnerDelegate","kind":"identifier"}],"role":"symbol"},"doc://com.microblink.CaptureCore/documentation/CaptureCore/MBCCSideCaptureResult":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCSideCaptureResult","title":"MBCCSideCaptureResult","url":"\/documentation\/capturecore\/mbccsidecaptureresult","fragments":[{"kind":"identifier","text":"MBCCSideCaptureResult"}],"abstract":[{"type":"text","text":"Side capture result."}],"kind":"symbol"},"doc://com.microblink.CaptureCore/documentation/CaptureCore":{"role":"collection","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore","abstract":[],"kind":"symbol","title":"CaptureCore","url":"\/documentation\/capturecore","type":"topic"},"doc://com.microblink.CaptureCore/documentation/CaptureCore/MBCCAnalyzerRunner":{"type":"topic","role":"symbol","fragments":[{"text":"MBCCAnalyzerRunner","kind":"identifier"}],"title":"MBCCAnalyzerRunner","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunner","url":"\/documentation\/capturecore\/mbccanalyzerrunner","abstract":[{"text":"DirectAPI component responsible for image analysis and best frame capture.","type":"text"}],"kind":"symbol"},"doc://com.microblink.CaptureCore/documentation/CaptureCore/MBCCAnalyzerRunnerDelegate/analyzerRunner:isSideCaptureFinished:":{"abstract":[{"text":"Method used to finish capture of current side when ","type":"text"},{"type":"codeVoice","code":"analyzeImage"},{"type":"text","text":" didn’t return"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCSideCaptureResult","isActive":true},{"type":"text","text":" state."}],"kind":"symbol","url":"\/documentation\/capturecore\/mbccanalyzerrunnerdelegate\/analyzerrunner:issidecapturefinished:","type":"topic","fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"analyzerRunner:isSideCaptureFinished:"}],"title":"analyzerRunner:isSideCaptureFinished:","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"analyzerRunner:isSideCaptureFinished:"}],"identifier":"doc:\/\/com.microblink.CaptureCore\/documentation\/CaptureCore\/MBCCAnalyzerRunnerDelegate\/analyzerRunner:isSideCaptureFinished:"}}}